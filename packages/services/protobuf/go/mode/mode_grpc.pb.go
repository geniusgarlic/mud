// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: proto/mode.proto

package mode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryLayerClient is the client API for QueryLayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryLayerClient interface {
	// Find endpoint.
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*QueryLayerResponse, error)
	// FindAll endpoint.
	FindAll(ctx context.Context, in *FindAllRequest, opts ...grpc.CallOption) (*QueryLayerResponse, error)
	// Count endpoint.
	Count(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*QueryLayerResponse, error)
}

type queryLayerClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryLayerClient(cc grpc.ClientConnInterface) QueryLayerClient {
	return &queryLayerClient{cc}
}

func (c *queryLayerClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*QueryLayerResponse, error) {
	out := new(QueryLayerResponse)
	err := c.cc.Invoke(ctx, "/mode.QueryLayer/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryLayerClient) FindAll(ctx context.Context, in *FindAllRequest, opts ...grpc.CallOption) (*QueryLayerResponse, error) {
	out := new(QueryLayerResponse)
	err := c.cc.Invoke(ctx, "/mode.QueryLayer/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryLayerClient) Count(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*QueryLayerResponse, error) {
	out := new(QueryLayerResponse)
	err := c.cc.Invoke(ctx, "/mode.QueryLayer/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryLayerServer is the server API for QueryLayer service.
// All implementations must embed UnimplementedQueryLayerServer
// for forward compatibility
type QueryLayerServer interface {
	// Find endpoint.
	Find(context.Context, *FindRequest) (*QueryLayerResponse, error)
	// FindAll endpoint.
	FindAll(context.Context, *FindAllRequest) (*QueryLayerResponse, error)
	// Count endpoint.
	Count(context.Context, *FindRequest) (*QueryLayerResponse, error)
	mustEmbedUnimplementedQueryLayerServer()
}

// UnimplementedQueryLayerServer must be embedded to have forward compatible implementations.
type UnimplementedQueryLayerServer struct {
}

func (UnimplementedQueryLayerServer) Find(context.Context, *FindRequest) (*QueryLayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedQueryLayerServer) FindAll(context.Context, *FindAllRequest) (*QueryLayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedQueryLayerServer) Count(context.Context, *FindRequest) (*QueryLayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedQueryLayerServer) mustEmbedUnimplementedQueryLayerServer() {}

// UnsafeQueryLayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryLayerServer will
// result in compilation errors.
type UnsafeQueryLayerServer interface {
	mustEmbedUnimplementedQueryLayerServer()
}

func RegisterQueryLayerServer(s grpc.ServiceRegistrar, srv QueryLayerServer) {
	s.RegisterService(&QueryLayer_ServiceDesc, srv)
}

func _QueryLayer_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryLayerServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mode.QueryLayer/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryLayerServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryLayer_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryLayerServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mode.QueryLayer/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryLayerServer).FindAll(ctx, req.(*FindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryLayer_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryLayerServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mode.QueryLayer/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryLayerServer).Count(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryLayer_ServiceDesc is the grpc.ServiceDesc for QueryLayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryLayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mode.QueryLayer",
	HandlerType: (*QueryLayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _QueryLayer_Find_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _QueryLayer_FindAll_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _QueryLayer_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mode.proto",
}
