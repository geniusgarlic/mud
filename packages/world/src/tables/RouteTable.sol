// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import { console } from "forge-std/console.sol";
import { IStore } from "store/IStore.sol";
import { SchemaType } from "store/Types.sol";
import { Schema } from "store/Schema.sol";
import { StringSchemaLib as SchemaLib } from "../schemas/String.sol";

// -- User defined schema and tableId --
bytes32 constant tableId = keccak256("mud.world.table.route");

// -- Autogenerated library to interact with tables with this schema --
// TODO: autogenerate

library RouteTable {
  /** Register the table's schema */
  function registerSchema() internal {
    SchemaLib.registerSchema(tableId);
  }

  function registerSchema(IStore store) internal {
    SchemaLib.registerSchema(tableId, store);
  }

  /** Set the table's data */
  function set(bytes32 routeId, string memory route) internal {
    SchemaLib.set(tableId, routeId, route);
  }

  /** Get the table's data */
  function get(bytes32 key) internal view returns (string memory) {
    return SchemaLib.get(tableId, key);
  }

  function get(IStore store, bytes32 key) internal view returns (string memory) {
    return SchemaLib.get(tableId, store, key);
  }

  function has(bytes32 key) internal view returns (bool) {
    return SchemaLib.has(tableId, key);
  }
}
