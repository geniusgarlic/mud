// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import { console } from "forge-std/console.sol";
import { IStore } from "@latticexyz/store/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/StoreCore.sol";
import { SchemaType } from "@latticexyz/store/Types.sol";
import { Bytes } from "@latticexyz/store/Bytes.sol";
import { Schema, SchemaLib } from "@latticexyz/store/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/PackedCounter.sol";
import { SliceLib } from "@latticexyz/store/Slice.sol";

// -- User defined schema and tableId --
struct SystemSchema {
  address system;
  bool publicAccess;
}

// -- Autogenerated library to interact with tables with this schema --
// TODO: autogenerate

library SystemSchemaLib {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema schema) {
    schema = SchemaLib.encode(SchemaType.BOOL, SchemaType.ADDRESS);
  }

  /** Register the table's schema */
  function registerSchema(uint256 tableId) internal {
    StoreSwitch.registerSchema(tableId, getSchema());
  }

  function registerSchema(uint256 tableId, IStore store) internal {
    store.registerSchema(tableId, getSchema());
  }

  /** Set the table's data */
  function set(
    uint256 tableId,
    bytes32 key,
    SystemSchema memory value
  ) internal {
    set(tableId, key, value.system, value.publicAccess);
  }

  function set(
    uint256 tableId,
    bytes32 key,
    address system,
    bool publicAccess
  ) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setRecord(tableId, keyTuple, abi.encodePacked(system, publicAccess));
  }

  function get(uint256 tableId, bytes32 key) internal view returns (address system, bool publicAccess) {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    bytes memory blob = StoreSwitch.getRecord(tableId, keyTuple);
    system = SliceLib.fromBytes(blob).toAddress();
    publicAccess = SliceLib.getSubslice(blob, 20).toBool();
  }

  function get(
    uint256 tableId,
    IStore store,
    bytes32 key
  ) internal view returns (address system, bool publicAccess) {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    bytes memory blob = store.getRecord(tableId, keyTuple);
    system = SliceLib.fromBytes(blob).toAddress();
    publicAccess = SliceLib.getSubslice(blob, 20).toBool();
  }
}
